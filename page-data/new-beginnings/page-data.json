{"componentChunkName":"component---src-templates-blog-post-js","path":"/new-beginnings/","result":{"data":{"site":{"siteMetadata":{"title":"Halime Öztürk Durdu Blog"}},"markdownRemark":{"id":"0d0d5b96-80b6-5581-bf07-47dcdb999a0a","excerpt":"State design pattern, bir nesnenin iç durumuna bağlı olarak davranışının değişmesini sağlar. Karmaşık durum ve davranışların yönetiminde kullanılır. Bu pattern…","html":"<p>State design pattern, bir nesnenin iç durumuna bağlı olarak davranışının değişmesini sağlar. Karmaşık durum ve davranışların yönetiminde kullanılır. Bu pattern, bir nesnenin durumuna bağlı olarak davranışlarının değişmesini sağlayarak kodun daha modüler, okunabilir ve genişletilebilir olmasını sağlar.</p>\n<p>State design pattern'in en büyük avantajı, yeni durumlar eklemek veya mevcut durumları değiştirmek istediğimizde kodun değişmeden kalmasıdır. Bu, yazılımın sürdürülebilirliğini artırır ve kod tabanındaki karmaşıklığı azaltır. State Design Pattern, sonlu durum makineleriyle oldukça benzerdir.</p>\n<p>Örneğin, kargoların gönderi durumunu yöneten bir sistem düşünelim. Bu sistemde bir gönderi oluşturulduğunda \"Created\" durumuna geçer, arabaya yüklendiğinde \"Loaded\" durumuna geçer, teslimat noktasına ulaştığında ise \"Unloaded\" durumuna geçer. \"Created\", \"Loaded\" ve \"Unloaded\" durumlarından geçersiz bir geçiş yapılmaya çalışıldığında \"InvalidState\" durumu ortaya çıkar. Örneğin, \"Created\" durumundan direkt \"Unloaded\" durumuna geçemeyiz.</p>\n<p><img src=\"image1.png\" alt=\"\"></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ShipmentState</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">CREATED</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">LOADED</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">UNLOADED</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">INVALID_STATE</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> currentState<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">ShipmentState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentState <span class=\"token operator\">=</span> <span class=\"token constant\">CREATED</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">updateState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentState <span class=\"token operator\">==</span> <span class=\"token constant\">CREATED</span> <span class=\"token operator\">&amp;&amp;</span> value <span class=\"token operator\">==</span> <span class=\"token constant\">LOADED</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                currentState <span class=\"token operator\">=</span> <span class=\"token constant\">LOADED</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Shipment Created. Current state: LOADED\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentState <span class=\"token operator\">==</span> <span class=\"token constant\">LOADED</span> <span class=\"token operator\">&amp;&amp;</span> value <span class=\"token operator\">==</span> <span class=\"token constant\">UNLOADED</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                currentState <span class=\"token operator\">=</span> <span class=\"token constant\">UNLOADED</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unload operation performed. Current state: UNLOADED\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                currentState <span class=\"token operator\">=</span> <span class=\"token constant\">INVALID_STATE</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid transition: Current state: INVALID_STATE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">ShipmentState</span> shipmentState <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ShipmentState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">//Created -> Loaded</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter state transition value (1 for CREATED, 2 for LOADED, 3 for UNLOADED):\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">String</span> value1 <span class=\"token operator\">=</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            shipmentState<span class=\"token punctuation\">.</span><span class=\"token function\">updateState</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>value1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Loaded -> Unloaded</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter next state transition value (1 for CREATED, 2 for LOADED, 3 for UNLOADED):\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">String</span> value2 <span class=\"token operator\">=</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            shipmentState<span class=\"token punctuation\">.</span><span class=\"token function\">updateState</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>value2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">BufferedReader</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">String</span> line <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                line <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> line<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Pattern kullanmadan kodu yazdığımızda if-switch yapılarından yardım alıyoruz. Yukarıdaki kod ilk bakıldığında küçük ve anlaşılır gözükebilir ancak araya yeni bir durum eklediğimizi düşünelim. Bu durumun adı “Delivered” olsun. Bu durumu eklerken tekrar bir if-else eklememiz gerekecek. İlerleyen günlerde, kullanıcı tarafından teslim alınmış ancak beğenilmemiş kargoları geri iade etme işlemi için bir durum eklenmek istendiğini düşünelim. Bu durumu eklerken tekrar if-else blokları eklemem gerekecek. Bu şekilde ilerlerken kodlar bir süre sonra karmaşık ve okunamaz hale gelir. Geliştirme yaparken bu istenilen bir durum değildir.</p>\n<p>Bu kodu bir de state pattern kullanarak yazmaya çalışalım.</p>\n<h3>1. Context (ShipmentContext)</h3>\n<p>Kargoların gönderi durumunu takip eden ve durumlar arası geçişi sağlayan sınıftır.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ShipmentContext</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ShipmentState</span> shipmentState<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ShipmentContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ShipmentState</span> shipmentState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shipmentState <span class=\"token operator\">=</span> shipmentState<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ShipmentContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ShipmentState</span> <span class=\"token function\">getShipmentState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> shipmentState<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setShipmentState</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ShipmentState</span> shipmentState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shipmentState <span class=\"token operator\">=</span> shipmentState<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        shipmentState<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">unload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        shipmentState<span class=\"token punctuation\">.</span><span class=\"token function\">unload</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>2. Interface (ShipmentState)</h3>\n<p>Kargo gönderileri durumları için bir interface oluşturdum. Statelerin gerçekleştirmesi gereken ortak metotları içerir. Böylece implement eden sınıflar bu metotları kendi durumlarına göre kullanabilecekler.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ShipmentState</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ShipmentContext</span> shipmentContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">void</span> <span class=\"token function\">unload</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ShipmentContext</span> shipmentContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<h3>3. Concrete States (CreatedState, LoadedState, UnloadedState ve InvalidState)</h3>\n<p>Concrete state’ler, CreatedState, LoadedState, UnloadedState ve InvalidState gibi kargo gönderi takip sisteminde gönderilerin belirli durumlarını temsil eder. CreatedState, LoadedState, UnloadedState ve InvalidState sınıflarını ShipmentState sınıfından implement ettim. Böylece her durum kendi metottunu kendine göre tanımlar.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CreatedState</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ShipmentState</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ShipmentContext</span> shipmentContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            shipmentContext<span class=\"token punctuation\">.</span><span class=\"token function\">setShipmentState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LoadedState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Shipment Created. Current state: Loaded\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">unload</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ShipmentContext</span> shipmentContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            shipmentContext<span class=\"token punctuation\">.</span><span class=\"token function\">setShipmentState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid transition. Current state: InvalidState\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoadedState</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ShipmentState</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ShipmentContext</span> shipmentContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        shipmentContext<span class=\"token punctuation\">.</span><span class=\"token function\">setShipmentState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid transition. Current state: InvalidState\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">unload</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ShipmentContext</span> shipmentContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        shipmentContext<span class=\"token punctuation\">.</span><span class=\"token function\">setShipmentState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">UnloadedState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unload operation performed. Current state: Unloaded\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UnloadedState</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ShipmentState</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ShipmentContext</span> shipmentContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        shipmentContext<span class=\"token punctuation\">.</span><span class=\"token function\">setShipmentState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid transition. Current state: InvalidState\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">unload</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ShipmentContext</span> shipmentContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        shipmentContext<span class=\"token punctuation\">.</span><span class=\"token function\">setShipmentState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid transition. Current state: InvalidState\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InvalidState</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ShipmentState</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ShipmentContext</span> shipmentContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid transition: Load operation is not allowed in the current state\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">unload</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ShipmentContext</span> shipmentContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid transition: Unload operation is not allowed in the current state\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">ShipmentContext</span> shipmentContext <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ShipmentContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            shipmentContext<span class=\"token punctuation\">.</span><span class=\"token function\">setShipmentState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">CreatedState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            shipmentContext<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            shipmentContext<span class=\"token punctuation\">.</span><span class=\"token function\">setShipmentState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LoadedState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            shipmentContext<span class=\"token punctuation\">.</span><span class=\"token function\">unload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            shipmentContext<span class=\"token punctuation\">.</span><span class=\"token function\">setShipmentState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">UnloadedState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            shipmentContext<span class=\"token punctuation\">.</span><span class=\"token function\">unload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Kısacası state design pattern, yazılım geliştirme sürecinde durum yönetimi gerektiren herhangi bir senaryoda kullanılabilir. Kodunuzu daha temiz, esnek ve bakımı kolay hale getirir.</p>\n<p>Bu yazıda basit bir kargo takip sistemi örneği üzerinden state design pattern’ini anlattım. Umarım yararlı olmuştur. Projenin tamamına <a href=\"https://github.com/halimeozturk/state-design-pattern\">github</a> hesabımdan ulaşabilirsiniz.</p>\n<h1>Kaynaklar</h1>\n<ul>\n<li><a href=\"https://refactoring.guru/design-patterns/state\">Refactoring Guru - State Design Pattern</a></li>\n<li><a href=\"https://sourcemaking.com/design_patterns/state\">SourceMaking - State Pattern</a></li>\n<li><a href=\"https://www.geeksforgeeks.org/state-design-pattern\">GeeksforGeeks - State Design Pattern</a></li>\n<li><a href=\"https://www.baeldung.com/java-state-design-pattern\">Baeldung - Java State Design Pattern</a></li>\n</ul>","frontmatter":{"title":"State Design Pattern","date":"September 25, 2024","description":null}},"previous":null,"next":null},"pageContext":{"id":"0d0d5b96-80b6-5581-bf07-47dcdb999a0a","previousPostId":null,"nextPostId":null}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}